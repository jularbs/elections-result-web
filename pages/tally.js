//TODOS: refine search, auth, hide download archive when not loggedin, refine regions
import Head from "next/head";
import styles from "styles/Home.module.scss";
import { useState, useEffect } from "react";

import { getBatches } from "actions/batch";
import { getPositions } from "actions/position";
import { getTallyByBatchAndLocation } from "actions/locationTally";
//search

import { usePapaParse } from "react-papaparse";

export default function Home() {
  const [batches, setBatches] = useState([]);
  const [batchSelection, setBatchSelection] = useState("");

  const [positions, setPositions] = useState([]);
  const [positionSelection, setPositionSelection] = useState("");

  const [tallyDoc, setTallyDoc] = useState("");
  const [tallyDocSelection, setTallyDocSelection] = useState({});
  const [tallyData, setTallyData] = useState([]);
  const [loadingTallyData, setLoadingTallyData] = useState(false);

  const [searchFilter, setSearchFilter] = useState("");

  const { readRemoteFile } = usePapaParse();

  useEffect(() => {
    getBatches().then((data) => {
      setBatches(data);
      if (data.length > 0) {
        setBatchSelection(data[0]._id);
      }
    });

    getPositions().then((data) => {
      setPositions(data);
      if (data.length > 0) {
        setPositionSelection(data[0]._id);
      }
    });
  }, []);

  useEffect(() => {
    if (batchSelection && positionSelection) {
      getTallyByBatchAndLocation({
        batchId: batchSelection,
        positionId: positionSelection,
      }).then((data) => {
        setTallyDoc(data);
        setTallyDocSelection(data[0]._id);
      });
    }
  }, [batchSelection, positionSelection]);

  useEffect(() => {
    setLoadingTallyData(true);
    if (tallyDocSelection) {
      //get doc of _id
      if (tallyDoc) {
        const tally = tallyDoc.filter(
          (doc) => doc._id === tallyDocSelection
        )[0];
        readRemoteFile(
          `${process.env.API}/v1/media?key=${tally.file?.key}&bucket=${tally.file?.bucket}`,
          {
            complete: (results) => {
              setLoadingTallyData(false);
              setTallyData(results.data.filter((row) => row.length == 2));
            },
          }
        );
      }
    }
  }, [tallyDocSelection]);

  const showPositions = () => {
    return positions.map((position, key) => {
      return (
        <li
          key={key}
          onClick={() => {
            setPositionSelection(position._id);
          }}
        >
          {position.name}
        </li>
      );
    });
  };

  const listBatches = () => {
    return batches.map((batch, key) => {
      return (
        <option key={key} value={batch._id}>
          {key == 0 ? `${batch.time} (LATEST)` : batch.time}
        </option>
      );
    });
  };

  const listLocations = () => {
    if (tallyDoc.length > 0)
      return tallyDoc.map((doc, key) => {
        return (
          <option key={key} value={doc._id}>
            {doc.location}
          </option>
        );
      });
  };

  const handleTallyDocSelection = (tallyDoc) => {
    setTallyDocSelection(tallyDoc);
  };

  const handleBatchSelection = (batch) => {
    setBatchSelection(batch);
  };

  const handleSearch = () => {
    const result = window.find(searchFilter);
    if (!result) {
      alert("Search keyword not found / Reached End of search");
    }
  };

  const displayData = () => {
    return tallyData.map((data, key) => (
      <tr>
        <td>{key}</td>
        <td>{data[0]}</td>
        <td>{data[1]}</td>
      </tr>
    ));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>MBC Unofficial Count</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.headerContainer2}>
        <div className={`${styles.batchContainer}`}>
          <select
            className={styles.selectWrapper}
            onChange={(e) => {
              handleBatchSelection(e.target.value);
            }}
          >
            {listBatches()}
          </select>
          <button className="btn btn-primary">Download Archive</button>
        </div>
        <div className={styles["location-container"]}>
          <ul>{showPositions()}</ul>
        </div>
      </div>

      {/* main content  */}
      <div className={styles.locationSelector}>
        <select
          className={styles.selectWrapper}
          onChange={(e) => {
            handleTallyDocSelection(e.target.value);
          }}
        >
          {listLocations()}
        </select>
      </div>

      <div className={styles.tallyContainer}>
        {loadingTallyData ? (
          "Loading..."
        ) : (
          //   <pre>
          //     <div>Tally Data: {JSON.stringify(tallyData, null, 2)}</div>
          //   </pre>
          <table>
            <thead>
              <tr>
                <td>#</td>
                <td>Name</td>
                <td>Tally</td>
              </tr>
            </thead>
            <tbody>{displayData()}</tbody>
          </table>
        )}
      </div>
{/* 
      <div className={styles.searchboxContainer2}>
        <input
          className="form-control"
          type="text"
          onChange={(e) => {
            setSearchFilter(e.target.value);
          }}
          placeholder="Position, Name of candidate, City, Province..."
        />
        <button className="btn" onClick={handleSearch}>
          Search
        </button>
      </div> */}
    </div>
  );
}
